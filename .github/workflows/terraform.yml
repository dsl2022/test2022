name: 'Terraform'
on:
    # workflow_dispatch:
    #     inputs:
    #         job:
    #             description: 'destroy'
    #             required: true
    #             default: 'destroy'

    push:
        branches:
            - main
    pull_request:

jobs:
    terraform:
        name: 'Terraform'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                  # terraform_version: 0.13.0:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Terraform Format
              working-directory: ./infra
              id: fmt
              run: terraform fmt

            - name: Terraform Init
              working-directory: ./infra
              id: init
              run: terraform init -upgrade

            - name: Terraform Validate
              working-directory: ./infra
              id: validate
              run: terraform validate -no-color
            - name: Terraform Plan
              working-directory: ./infra
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan
              continue-on-error: true

            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`\n
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                      })

            - name: Terraform Plan Status
              working-directory: ./infra
              if: steps.plan.outcome == 'failure'
              run: exit 1
            - name: Build Lambda Function
              id: build-lambda
              run: npm install --legacy-peer-deps && npm run build && pwd && ls && ls infra/dist
              continue-on-error: true
            - name: Terraform Apply
              working-directory: ./infra
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false

name: Destroy Terraform
on: 
    workflow_dispatch:
        inputs:
            git-ref:
                description: Git Ref (Optional)    
                required: false
jobs:
    deploy:
        name: Deploy To Production
        runs-on: ubuntu-latest
        steps:
            - name: Clone Repository (Latest)
              uses: actions/checkout@v2
              if: github.event.inputs.git-ref == ''
            - name: Clone Repository (Custom Ref)
              uses: actions/checkout@v2
              if: github.event.inputs.git-ref != ''
              with:
                ref: ${{ github.event.inputs.git-ref }}
            # Now run whatever you want:
            - name: init Terraform
              working-directory: ./infra
              run: terraform init -upgrade
            - name: init Terraform
              working-directory: ./infra
              run: terraform destroy -auto-approve -input=false
    # destroy:
    #     name: 'Destroy'
    #     runs-on: ubuntu-latest
    #     needs: terraform
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v3
    #         - name: Setup Terraform
    #           uses: hashicorp/setup-terraform@v1
    #           with:
    #               # terraform_version: 0.13.0:
    #               cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    #         - name: Terraform Destroy
    #           working-directory: ./infra
    #           id: destroy
    #           run: terraform destroy -auto-approve
